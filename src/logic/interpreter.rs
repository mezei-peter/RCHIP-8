use crate::guestsystem::components::{cpu::{Cpu, CpuInstruction}, memory::Memory};

pub const FONT_SIZE: usize = 5;
pub const ALL_FONT_COUNT: usize = 16;

#[derive(Debug)]
pub struct Interpreter;

impl Interpreter {
    pub fn new() -> Interpreter {
        Interpreter
    }

    pub fn generate_fonts(&self) -> [u8; FONT_SIZE * ALL_FONT_COUNT] {
        [
            0xF0, 0x90, 0x90, 0x90, 0xF0, //0
            0x20, 0x60, 0x20, 0x20, 0x70, //1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
            0x90, 0x90, 0xF0, 0x10, 0x10, //4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
            0xF0, 0x10, 0x20, 0x40, 0x40, //7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
            0xF0, 0x90, 0xF0, 0x90, 0x90, //A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
            0xF0, 0x80, 0x80, 0x80, 0xF0, //C
            0xE0, 0x90, 0x90, 0x90, 0xE0, //D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
            0xF0, 0x80, 0xF0, 0x80, 0x80, //F
        ]
    }

    pub fn fetch(&self, memory: &Memory, address: u16) -> u16 {
        let byte_1: u8 = memory.at_address(address);
        let byte_2: u8 = memory.at_address(address + 1);
        ((byte_1 as u16) << 8) | byte_2 as u16
    }

    pub fn next_pc(&self, current_address: u16) -> u16 {
        current_address + 2
    }

    pub fn decode(&self, raw_instruction: u16) -> CpuInstruction {
        todo!();
    }
}
